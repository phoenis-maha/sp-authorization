/*
Selling Partner API for Authorization

The Selling Partner API for Authorization helps developers manage authorizations and check the specific permissions associated with a given authorization.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuthorizationCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationCode{}

// AuthorizationCode A Login with Amazon (LWA) authorization code.
type AuthorizationCode struct {
	// A Login with Amazon (LWA) authorization code that can be exchanged for a refresh token and access token that authorize you to make calls to a Selling Partner API.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
}

// NewAuthorizationCode instantiates a new AuthorizationCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationCode() *AuthorizationCode {
	this := AuthorizationCode{}
	return &this
}

// NewAuthorizationCodeWithDefaults instantiates a new AuthorizationCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationCodeWithDefaults() *AuthorizationCode {
	this := AuthorizationCode{}
	return &this
}

// GetAuthorizationCode returns the AuthorizationCode field value if set, zero value otherwise.
func (o *AuthorizationCode) GetAuthorizationCode() string {
	if o == nil || IsNil(o.AuthorizationCode) {
		var ret string
		return ret
	}
	return *o.AuthorizationCode
}

// GetAuthorizationCodeOk returns a tuple with the AuthorizationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationCode) GetAuthorizationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationCode) {
		return nil, false
	}
	return o.AuthorizationCode, true
}

// HasAuthorizationCode returns a boolean if a field has been set.
func (o *AuthorizationCode) HasAuthorizationCode() bool {
	if o != nil && !IsNil(o.AuthorizationCode) {
		return true
	}

	return false
}

// SetAuthorizationCode gets a reference to the given string and assigns it to the AuthorizationCode field.
func (o *AuthorizationCode) SetAuthorizationCode(v string) {
	o.AuthorizationCode = &v
}

func (o AuthorizationCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizationCode) {
		toSerialize["authorizationCode"] = o.AuthorizationCode
	}
	return toSerialize, nil
}

type NullableAuthorizationCode struct {
	value *AuthorizationCode
	isSet bool
}

func (v NullableAuthorizationCode) Get() *AuthorizationCode {
	return v.value
}

func (v *NullableAuthorizationCode) Set(val *AuthorizationCode) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationCode) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationCode(val *AuthorizationCode) *NullableAuthorizationCode {
	return &NullableAuthorizationCode{value: val, isSet: true}
}

func (v NullableAuthorizationCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


